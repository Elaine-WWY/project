{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0ea7e113",
   "metadata": {},
   "source": [
    "This jupyter notebook only contains the major working codes for reference."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "550d4c5b",
   "metadata": {},
   "source": [
    "## Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ef565e11",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pyecharts'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 11\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mplotly\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01moffline\u001b[39;00m\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mplotly\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mgraph_objs\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mgo\u001b[39;00m\n\u001b[1;32m---> 11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpyecharts\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m options \u001b[38;5;28;01mas\u001b[39;00m opts\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpyecharts\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcharts\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Sankey\n\u001b[0;32m     14\u001b[0m \u001b[38;5;66;03m# Optional - Ignore warnings.\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pyecharts'"
     ]
    }
   ],
   "source": [
    "# Import the  libraries.\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly as py\n",
    "import plotly.express as px \n",
    "import plotly.graph_objects as go\n",
    "import plotly.offline\n",
    "import plotly.graph_objs as go\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Sankey\n",
    "\n",
    "# Optional - Ignore warnings.\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d24bf62c",
   "metadata": {},
   "source": [
    "## data cleansing\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea9be0e7",
   "metadata": {},
   "source": [
    "### Handle dataset 1: actual_duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "624d89f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import and sense-check the actual_duration.csv data set as ad.\n",
    "ad = pd.read_csv('actual_duration.csv')\n",
    "\n",
    "# View the DataFrame.\n",
    "ad.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc9f9601",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the metadata of the data set.\n",
    "ad.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58e8fe83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the appointment date to datetime type\n",
    "ad['appointment_date'] = pd.to_datetime(ad['appointment_date'])\n",
    "\n",
    "# Determine the record period of ad dataframe\n",
    "ad['appointment_date'].agg(['min','max'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05de8f14",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create some additional columns of dates in ad DataFrame\n",
    "\n",
    "month_dict={1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May',6:'Jun',\n",
    "            7:'Jul', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'}\n",
    "\n",
    "season_dict={1:'Winter',2:'Winter',3:'Winter',\n",
    "             4:'Spring',5:'Spring',6:'Spring',\n",
    "             7:'Summer',8:'Summer',9:'Summer',\n",
    "             10:'Autumn',11:'Autumn',12:'Autumn'}\n",
    "\n",
    "region_dict={'E40000003':'London', 'E40000005':'South East',\n",
    "             'E40000006':'South West', 'E40000007':'East of England', \n",
    "             'E40000010':'North West', 'E40000011':'Midlands', 'E40000012':'North East and Yorkshire'}\n",
    "\n",
    "ad['appointment_month'] = ad['appointment_date'].dt.to_period('M')\n",
    "ad['year']=ad['appointment_date'].dt.year\n",
    "ad['quarter']=ad['appointment_date'].dt.quarter\n",
    "ad['month'] = ad['appointment_date'].dt.month\n",
    "ad['month_year']=ad['month'].map(month_dict).astype(str)+'-'+ad.year.astype(str)\n",
    "ad['season']=ad['month'].map(season_dict)\n",
    "\n",
    "ad['weekday']=ad['appointment_date'].dt.day_name()\n",
    "\n",
    "ad['region']=ad['region_ons_code'].map(region_dict)\n",
    "\n",
    "ad.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46cb4ac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the number of unique elements of the data set.\n",
    "ad.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f694cd9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine whether there are missing values.\n",
    "ad.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a42f1f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine whether there are duplicated records.\n",
    "ad.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77e7a7c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "ad.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebe66043",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the total actualized appointment in ad dataframe\n",
    "ad['count_of_appointments'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca8caa3d",
   "metadata": {},
   "source": [
    "## Handle dataset 2: appointments_regional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2dfbc7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import and sense-check the appointments_regional.csv data set as ar.\n",
    "ar = pd.read_csv('appointments_regional.csv')\n",
    "\n",
    "# View the DataFrame.\n",
    "ar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1daa3556",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the metadata of the data set.\n",
    "ar.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3736f974",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the appointment month to datetime type\n",
    "ar['appointment_month'] = pd.to_datetime(ar['appointment_month'])\n",
    "\n",
    "# Determine the record period of ad dataframe\n",
    "ar['appointment_month'].agg(['min','max'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d8a61de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create some additional columns of dates in ad DataFrame\n",
    "month_dict={1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May',6:'Jun',\n",
    "            7:'Jul', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'}\n",
    "\n",
    "season_dict={1:'Winter',2:'Winter',3:'Winter',\n",
    "             4:'Spring',5:'Spring',6:'Spring',\n",
    "             7:'Summer',8:'Summer',9:'Summer',\n",
    "             10:'Autumn',11:'Autumn',12:'Autumn'}\n",
    "\n",
    "region_dict={'E40000003':'London', 'E40000005':'South East',\n",
    "             'E40000006':'South West', 'E40000007':'East of England', \n",
    "             'E40000010':'North West', 'E40000011':'Midlands', 'E40000012':'North East and Yorkshire'}\n",
    "\n",
    "ar['year']=ar['appointment_month'].dt.year\n",
    "ar['quarter']=ar['appointment_month'].dt.quarter\n",
    "ar['month']= ar['appointment_month'].dt.month\n",
    "ar['month_year']=ar['month'].map(month_dict).astype(str)+'-'+ar.year.astype(str)\n",
    "ar['season']=ar['month'].map(season_dict)\n",
    "\n",
    "code = ad[['icb_ons_code','region_ons_code']].drop_duplicates()\n",
    "code_dict = dict(zip(code.icb_ons_code,code.region_ons_code))\n",
    "ar['region_ons_code']=ar['icb_ons_code'].map(code_dict)\n",
    "\n",
    "region_dict={'E40000003':'London', 'E40000005':'South East',\n",
    "             'E40000006':'South West', 'E40000007':'East of England', \n",
    "             'E40000010':'North West', 'E40000011':'Midlands', 'E40000012':'North East and Yorkshire'}\n",
    "\n",
    "ar['region']=ar['region_ons_code'].map(region_dict)\n",
    "\n",
    "ar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35276d01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the number of unique elements of the data set.\n",
    "ar.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "255823c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine whether there are missing values.\n",
    "ar.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52b7f533",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the number of appointment records in ar dataframe\n",
    "ar['count_of_appointments'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5439136",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the number of duplicated record\n",
    "ar.duplicated().sum()\n",
    "\n",
    "# Keep all records since there is no record of every single appointments for cross-check. \n",
    "# The total numbers of appointment match with nc dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a1fbb4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the descriptive statistics of the data set.\n",
    "ar.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73e9c144",
   "metadata": {},
   "source": [
    "## Handle dataset 3: national_categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e30305d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import and sense-check the national_categories.xlsx data set as nc.\n",
    "nc = pd.read_excel('national_categories.xlsx')\n",
    "\n",
    "# View the DataFrame.\n",
    "nc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34edbad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the number of categories in each variable.\n",
    "nc.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7d03854",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the metadata of the data set.\n",
    "nc.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b29179c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine whether there are missing values.\n",
    "nc.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84b42d70",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the appointment date to datetime type\n",
    "nc['appointment_date'] = pd.to_datetime(nc['appointment_date'])\n",
    "\n",
    "# Determine the record period of ad dataframe\n",
    "nc['appointment_date'].agg(['min','max'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27ad9e32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create some additional columns of dates in nc DataFrame\n",
    "\n",
    "month_dict={1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May',6:'Jun',\n",
    "            7:'Jul', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'}\n",
    "\n",
    "season_dict={1:'Winter',2:'Winter',3:'Winter',\n",
    "             4:'Spring',5:'Spring',6:'Spring',\n",
    "             7:'Summer',8:'Summer',9:'Summer',\n",
    "             10:'Autumn',11:'Autumn',12:'Autumn'}\n",
    "\n",
    "nc['year']=nc['appointment_date'].dt.year\n",
    "nc['quarter']=nc['appointment_date'].dt.quarter\n",
    "nc['month']=nc['appointment_date'].dt.month\n",
    "nc['month_year']=nc['month'].map(month_dict).astype(str)+'-'+nc.year.astype(str)\n",
    "nc['season']=nc['month'].map(season_dict)\n",
    "nc['weekday']=nc['appointment_date'].dt.day_name()\n",
    "\n",
    "code = ad[['icb_ons_code','region_ons_code']].drop_duplicates()\n",
    "code_dict = dict(zip(code.icb_ons_code,code.region_ons_code))\n",
    "nc['region_ons_code']=nc['icb_ons_code'].map(code_dict)\n",
    "\n",
    "\n",
    "region_dict={'E40000003':'London', 'E40000005':'South East',\n",
    "             'E40000006':'South West', 'E40000007':'East of England', \n",
    "             'E40000010':'North West', 'E40000011':'Midlands', 'E40000012':'North East and Yorkshire'}\n",
    "\n",
    "nc['region']=nc['region_ons_code'].map(region_dict)\n",
    "\n",
    "nc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f77bdcca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the number of duplicated record\n",
    "nc.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4aafc061",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine the descriptive statistics of the data set.\n",
    "nc.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "696ae756",
   "metadata": {},
   "source": [
    "# Investigate staffing issue "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd197c46",
   "metadata": {},
   "source": [
    "### Appointment VS Capacity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f68d0576",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Sum the appointments: by month\n",
    "\n",
    "# Calculate total appointments per month (Jan 2020 - Jun 2022)\n",
    "ar_df = ar.groupby(['appointment_month','appointment_status'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "# Calculate the calendars of month\n",
    "ar_df['daysinmonth'] = ar_df['appointment_month'].apply(lambda t: pd.Period(t, freq='S').days_in_month)\n",
    "\n",
    "# Calculate the monthly max capacity\n",
    "ar_df['month_capacity']=1200000*ar_df['daysinmonth']\n",
    "\n",
    "# Calculate the expected capacity utilisation rate\n",
    "ar_df['expected_utilisation_rate'] = ar_df['count_of_appointments']/ar_df['month_capacity']*100\n",
    "\n",
    "# Calculate the actual capacity utilisation for attended appointments\n",
    "def actual_utilisation(row):\n",
    "   if row['appointment_status'] == 'Attended':\n",
    "        return row['count_of_appointments']\n",
    "ar_df['actual_utilisation'] = ar_df.apply(actual_utilisation, axis=1)\n",
    "ar_df['actual_utilisation'].fillna(0, inplace=True)\n",
    "\n",
    "# Calculate the actual capacity utilisation rate\n",
    "def actual_utilisation_rate(row):\n",
    "    if row['appointment_status'] == 'Attended':\n",
    "        return row['expected_utilisation_rate']\n",
    "\n",
    "ar_df['actual_utilisation_rate'] = ar_df.apply(actual_utilisation_rate, axis=1)\n",
    "ar_df['actual_utilisation_rate'].fillna(0, inplace=True)\n",
    "\n",
    "ar_df_line = ar_df.groupby(['appointment_month'])['expected_utilisation_rate','actual_utilisation_rate'].agg('sum').reset_index()\n",
    "fig = px.line(ar_df_line, x='appointment_month', y=ar_df_line.columns[1:],\n",
    "              template='none', title='Capacity utilization rate per month',\n",
    "              labels={'variable':'Utilization Rate',\n",
    "                      'value': 'Percentage against the maximum capacity',\n",
    "                     'appointment_month': 'Appointment Month'})\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.add_hline(y=100,line_width=3, line_dash=\"dash\", line_color='green', name='Capacity')\n",
    "fig.update_yaxes(range=[0, 100])\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7dc5e5b0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Total appointments (ar)\n",
    "\n",
    "data = ar.groupby(['appointment_month','season'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.bar(data, x='appointment_month', y='count_of_appointments', \n",
    "             color='season',\n",
    "             category_orders={'season': ['Spring', 'Summer', 'Autumn', 'Winter']},\n",
    "             text='count_of_appointments', template='none')\n",
    "fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_layout(title = 'Number of appointments per month', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Number of Appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a63623b",
   "metadata": {},
   "source": [
    "# Regions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de08433b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','region'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.line(data, x='appointment_month', y='count_of_appointments',\n",
    "             template='none', color='region',width=800, height=400)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per month for region', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "507d5b00",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# 100% stack bar plots\n",
    "\n",
    "data = ar.groupby(['region','appointment_status'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('region')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='region', y='Percentage',color='appointment_status',\n",
    "             category_orders={'region': ['Midlands', 'North East and Yorkshire',\n",
    "                                         'South East', 'London', 'North West',\n",
    "                                         'East of England','South West']},\n",
    "                              title=\"Appointment per region\", template='none', text_auto= True)   \n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c19c77f0",
   "metadata": {},
   "source": [
    "## HCP types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a56b3247",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','hcp_type'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.pie(data, values='count_of_appointments', \n",
    "             names='hcp_type', template='none')\n",
    "fig.update_traces(textposition='inside', textinfo='percent+label')\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_layout(title = 'Appointments by hcp types' ,\n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Number of Appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "404c1855",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','hcp_type'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('appointment_month')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_month', y='Percentage',color='hcp_type',\n",
    "        title='Appointments per hcp type', template='none', text_auto= True)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b66a97f6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = ar.groupby(['hcp_type','appointment_status'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('hcp_type')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='hcp_type', y='Percentage',color='appointment_status',\n",
    "        title='Appointments per hcp type', template='none', text_auto= True)   \n",
    "fig.update_layout(barmode='group')\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb937166",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','hcp_type'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.line(data, x='appointment_month', y='count_of_appointments',\n",
    "             template='none', color='hcp_type',width=800, height=400)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per month for hcp type', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47a06652",
   "metadata": {},
   "source": [
    "## Appointment modes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2b45fec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.3 Total appointments (ar) - mode\n",
    "# 1.3.1 Pie chart - mode % \n",
    "data = ar.groupby(['appointment_month','appointment_mode'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.pie(data, values='count_of_appointments', \n",
    "             names='appointment_mode', template='none',\n",
    "             category_orders=\n",
    "             {'appointment_mode':['Face-to-Face', 'Telephone','Home Visit', 'Video/Online','Unknown']})\n",
    "fig.update_traces(textposition='inside', textinfo='percent+label')\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_layout(title = 'Appointments by appointment modes', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Number of Appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8f7bf73",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','appointment_mode'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('appointment_month')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_month', y='Percentage',color='appointment_mode',\n",
    "        title='Appointments per mode', template='none', text_auto= True,category_orders=\n",
    "             {'appointment_mode':['Face-to-Face', 'Telephone','Home Visit', 'Video/Online','Unknown']})\n",
    "#fig.update_layout(barmode=\"relative\")\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c776401",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','appointment_mode'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.line(data, x='appointment_month', y='count_of_appointments',\n",
    "             template='none', color='appointment_mode',width=800, height=400,\n",
    "              category_orders=\n",
    "             {'appointment_mode':['Face-to-Face', 'Telephone','Home Visit', 'Video/Online','Unknown']})\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per month for appointment mode', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72b63e08",
   "metadata": {},
   "source": [
    "## Waiting time between booking and appointment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2096572",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.pie(data, values='count_of_appointments', \n",
    "             names='time_between_book_and_appointment', \n",
    "             category_orders={'time_between_book_and_appointment': \n",
    "                              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "                               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality']},\n",
    "             template='none')\n",
    "fig.update_traces(textposition='inside', textinfo='percent+label')\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_layout(title = 'Number of appointments per waiting time', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Number of Appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31c88832",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('appointment_month')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_month', y='Percentage',color='time_between_book_and_appointment',\n",
    "        title='Appointments per waiting time', template='none', text_auto= True,                           \n",
    "             category_orders={'time_between_book_and_appointment': \n",
    "                              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "                               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality']})\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2db3f66e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.line(data, x='appointment_month', y='count_of_appointments',\n",
    "             template='none', color='time_between_book_and_appointment',width=1000, height=400,\n",
    "                           category_orders={'time_between_book_and_appointment': \n",
    "                              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "                               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality']})\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per month for waiting time', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e27af21",
   "metadata": {},
   "source": [
    "## Appointment Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3711d06d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','appointment_status'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.line(data, x='appointment_month', y='count_of_appointments',\n",
    "             template='none', color='appointment_status',width=1000, height=400)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per appointment status', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f12da3ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ar.groupby(['appointment_month','appointment_status','season'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('appointment_month')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_month', y='Percentage', color='season',\n",
    "             category_orders={'season': ['Spring', 'Summer', 'Autumn', 'Winter']},\n",
    "             facet_row='appointment_status',\n",
    "            title='Total appointments per status', template='none', text_auto= True)   \n",
    "\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e300c8e",
   "metadata": {},
   "source": [
    "# Patient pathway"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5809c054",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "data = ar.groupby(['month_year','hcp_type','appointment_mode','appointment_status'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "px.bar(data, x='appointment_mode', y='count_of_appointments',color='appointment_status',\n",
    "       facet_col ='hcp_type',\n",
    "       title=\"Number of appointment per hcp types and appointment mode\", template='none', height=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bc08629",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = ar.groupby(['hcp_type','appointment_mode','appointment_status','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby(['hcp_type','appointment_mode','time_between_book_and_appointment'])['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_mode', y='Percentage',color='appointment_status',\n",
    "             facet_row='time_between_book_and_appointment', animation_frame = 'hcp_type',\n",
    "             category_orders=\n",
    "             {'time_between_book_and_appointment': \n",
    "              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality'],\n",
    "              'appointment_mode':['Face-to-Face', 'Telephone','Home Visit', 'Video/Online','Unknown']},\n",
    "             title='Appointment attendance % per hcp, mode, waiting time', template='none', text_auto= True,\n",
    "             width=800, height=1500)\n",
    "fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f14261c7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = ar.groupby(['hcp_type','appointment_mode','appointment_status','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby(['hcp_type','appointment_mode','time_between_book_and_appointment'])['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_mode', y='Percentage',color='appointment_status',\n",
    "             facet_row='time_between_book_and_appointment', animation_frame = 'hcp_type',\n",
    "             category_orders=\n",
    "             {'time_between_book_and_appointment': \n",
    "              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality'],\n",
    "              'appointment_mode':['Face-to-Face', 'Telephone','Home Visit', 'Video/Online','Unknown']},\n",
    "             title='Appointment attendance % per hcp, mode, waiting time', template='none', text_auto= True,\n",
    "             width=800, height=1500)\n",
    "fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0e06a47",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = ar.groupby(['region','hcp_type','appointment_mode','appointment_status','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby(['region','hcp_type','appointment_mode','time_between_book_and_appointment'])['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_mode', y='Percentage',color='appointment_status',\n",
    "             facet_col='hcp_type',\n",
    "             facet_row='time_between_book_and_appointment', animation_frame = 'region',\n",
    "             category_orders=\n",
    "             {'time_between_book_and_appointment': \n",
    "              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality'],\n",
    "              'appointment_mode':['Face-to-Face', 'Telephone','Home Visit', 'Video/Online','Unknown']},\n",
    "             title='Appointment attendance % per region', template='none', text_auto= True,\n",
    "             width=1500, height=1500)\n",
    "fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9612f15c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data = ar.groupby(['month_year','hcp_type','appointment_mode','time_between_book_and_appointment','appointment_status'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.bar(data, x='appointment_mode', y='count_of_appointments',color='appointment_status',\n",
    "       facet_row ='time_between_book_and_appointment', animation_frame='hcp_type',\n",
    "       category_orders={'time_between_book_and_appointment': \n",
    "                        ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "                         '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality']},\n",
    "                        title=\"Number of Appointments\", template='none', height=1900)\n",
    "fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c126e79",
   "metadata": {},
   "source": [
    "# Actual Duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfeef999",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ad.groupby(['actual_duration','month_year'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.bar(data, x='month_year', y='count_of_appointments',\n",
    "              category_orders={'month_year': \n",
    "                        ['Dec-2021', 'Jan-2022', 'Feb-2022', 'Mar-2022', 'Apr-2022',\n",
    "                         'May-2022', 'Jun-2022'],\n",
    "                               'actual_duration':['1-5 Minutes','6-10 Minutes','11-15 Minutes',\n",
    "                                                  '16-20 Minutes','21-30 Minutes','31-60 Minutes'\n",
    "                                                  'Unknown / Data Quality']},\n",
    "             template='none', color='actual_duration',width=1000, height=400)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per actual duration', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29b90d93",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Appointment Distribution [HCP type, Appointment mode, Waiting time, Final Status]\n",
    "\n",
    "data = ad.groupby(['actual_duration','region'])['count_of_appointments'].sum().reset_index()\n",
    "\n",
    "fig =px.sunburst(data, \n",
    "                 path=['actual_duration','region'],\n",
    "                 values='count_of_appointments',\n",
    "                       title=\"Appointment duartion per region\",\n",
    "                  width=750, height=750, template = 'none')\n",
    "fig.update_traces(textinfo=\"label+percent parent\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "769a398f",
   "metadata": {},
   "source": [
    "## National Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f9023b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = nc.groupby(['national_category','appointment_month'])['count_of_appointments'].agg('sum').reset_index()\n",
    "data['Percentage'] = 100 * data['count_of_appointments'] / data.groupby('appointment_month')['count_of_appointments'].transform('sum')\n",
    "data['Percentage'] = data['Percentage'].apply(lambda x: '{0:.2f}%'.format(x))\n",
    "\n",
    "fig = px.bar(data, x='appointment_month', y='Percentage',color='national_category',\n",
    "        title='Appointment per national category', template='none', text_auto= True)                           \n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13c0e80d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = nc.groupby(['national_category','appointment_month'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.line(data, x='appointment_month', y='count_of_appointments',\n",
    "             template='none', color='national_category',width=1000, height=400)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_yaxes(rangemode=\"tozero\")\n",
    "fig.update_layout(title = 'Number of appointments per national category', \n",
    "                  xaxis_title = \"Month\", yaxis_title = \"Numbers of appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a5d96c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Appointment per national category\n",
    "\n",
    "data = nc.groupby(['service_setting','national_category'])['count_of_appointments'].agg('sum').reset_index()\n",
    "new_data = data.sort_values('count_of_appointments',ascending = False)\n",
    "\n",
    "fig = px.bar(new_data, x='national_category', y='count_of_appointments', \n",
    "             color='service_setting',\n",
    "             text='count_of_appointments', template='none')\n",
    "fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n",
    "fig.update_traces(opacity=0.85)\n",
    "fig.update_xaxes(dtick=\"M1\", tickangle=45)\n",
    "fig.update_layout(title = 'Appointment per national category', \n",
    "                  xaxis_title = 'National Category', yaxis_title = \"Number of Appointments\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81b923a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Appointment Distribution per region,service_setting,national_category\n",
    "\n",
    "data = nc.groupby(['service_setting','national_category'])['count_of_appointments'].sum().reset_index()\n",
    "\n",
    "fig =px.sunburst(data, \n",
    "                 path=['service_setting','national_category'],\n",
    "                 values='count_of_appointments',\n",
    "                       title=\"Total Appointment Distribution [region,service_setting,national_category]\",\n",
    "                  width=750, height=750,template = 'none')\n",
    "fig.update_traces(textinfo=\"label+percent parent\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9ed51a2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Appointment Distribution [region,service_setting,national_category]\n",
    "\n",
    "data = nc.groupby(['region','service_setting','national_category'])['count_of_appointments'].sum().reset_index()\n",
    "\n",
    "fig =px.sunburst(data, \n",
    "                 path=['region','service_setting','national_category'],\n",
    "                 values='count_of_appointments',\n",
    "                       title=\"Total Appointment Distribution [region,service_setting,national_category]\",\n",
    "                  width=750, height=750,template = 'none')\n",
    "fig.update_traces(textinfo=\"label+percent parent\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a587d074",
   "metadata": {},
   "source": [
    "# No Show Appointment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d52e989f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DNA appointments distribution (patient pathway)\n",
    "\n",
    "# Appointment Distribution [HCP type, Appointment mode, Waiting time, Final Status]\n",
    "data = ar.groupby(['appointment_month','region','hcp_type','appointment_mode','time_between_book_and_appointment','appointment_status'])['count_of_appointments'].sum().reset_index()\n",
    "filter = (data['appointment_status']=='DNA') & (data['appointment_month']=='2022-04-01')\n",
    "\n",
    "fig =px.sunburst(data[filter], \n",
    "                 path=['region','hcp_type','appointment_mode'], #'time_between_book_and_appointment'],\n",
    "                 values='count_of_appointments',\n",
    "                 title='DNA Appointment Distribution - region, HCP type, appointment mode, Waiting time',\n",
    "                  width=750, height=750)\n",
    "fig.update_traces(textinfo=\"label+percent parent\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13a6ee69",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = ar[ar['appointment_status'] == 'DNA']\n",
    "data = data.groupby(['appointment_status','hcp_type','appointment_mode','time_between_book_and_appointment'])['count_of_appointments'].agg('sum').reset_index()\n",
    "\n",
    "fig = px.bar(data, x='appointment_mode', y='count_of_appointments',color='time_between_book_and_appointment',\n",
    "             facet_col ='hcp_type',facet_row ='appointment_status',\n",
    "             category_orders={'time_between_book_and_appointment': \n",
    "                              ['Same Day','1 Day', '2 to 7 Days','8  to 14 Days','15  to 21 Days', \n",
    "                               '22  to 28 Days', 'More than 28 Days','Unknown / Data Quality']},\n",
    "             title=\"DNA Appointments\", template='none')   \n",
    "fig.update_layout(barmode=\"relative\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a20d4494",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tree plot\n",
    "# Determine the trend of DNA appintment.\n",
    "ar_filter = (ar['appointment_status'] == \"DNA\")\n",
    "\n",
    "# View the output.\n",
    "filtered_ar = ar.loc[ar_filter]\n",
    "\n",
    "ar_tree = filtered_ar.groupby(['hcp_type','appointment_mode','time_between_book_and_appointment'])['count_of_appointments'].sum().reset_index()\n",
    "\n",
    "ar_tree[\"all\"] = \"all\" # in order to have a single root node\n",
    "fig = px.treemap(ar_tree, \n",
    "                 path=['all','hcp_type','appointment_mode','time_between_book_and_appointment'], \n",
    "                 values='count_of_appointments', title=\"DNA appointments per month, appointment mode, waiting time\") # 面积大小用total_bill字段决定\n",
    "                \n",
    "fig.update_traces(textinfo=\"label+percent parent\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f76f4e18",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# DNA Appointment Distribution [HCP type, Appointment mode, Waiting time, Final Status]\n",
    "\n",
    "data = ar.groupby(['hcp_type','appointment_mode','time_between_book_and_appointment','appointment_status'])['count_of_appointments'].sum().reset_index()\n",
    "filter = data['appointment_status']=='DNA'\n",
    "\n",
    "fig =px.sunburst(data[filter], \n",
    "                 path=['hcp_type','appointment_mode','time_between_book_and_appointment'],\n",
    "                 values='count_of_appointments',\n",
    "                       title='DNA Appointment Distribution - region, HCP type, appointment mode, Waiting time',\n",
    "                  width=750, height=750,template = 'none')\n",
    "fig.update_traces(textinfo=\"label+percent parent\")\n",
    "fig.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
